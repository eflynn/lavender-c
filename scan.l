%{
  #include <stdio.h>
  #include <assert.h>
  #include "parser.tab.h" /* Generated by bison. */

  #define MAX_DEPTH 72

  static unsigned int indent_stack[MAX_DEPTH] = {0};
  static unsigned int level = 0;
  /* static unsigned int blocklines = 0; */

  int process_indent(int);
%}

%option noyywrap
%option debug

PUNCT     [-+*/=<>:]*
ID        [A-Za-z_][A-Za-z0-9_]+

%%

==		return EQUALS;
true		return TRUE;
false		return FALSE;
if		return IF;
else		return ELSE;
block		return BLOCK;
each		return EACH;
in		return IN;
extends		return EXTENDS;
doctype		return DOCTYPE;

[-+*/|()\n]	return yytext[0];

{ID}		{ printf("len: %zu\n", yyleng); 
		  yylval.id = strdup(yytext);
                  return ID; 
                }
[[:digit:]]+	{ sscanf(yytext, "%lf", &yylval.val);
		  return NUM; 
		}

[[:blank:]]+	/* ignore */
<<EOF>>   	return 0;
%%

int process_indent(int indent) {
  if (indent > indent_stack[level]) {
    assert(level+1 < MAX_DEPTH);
    indent_stack[++level] = indent;
    return INDENT;
  }

  if (indent < indent_stack[level]) {
    level--;
    return DEDENT;
  }

  assert(level >= 0);

  return -1;
}

